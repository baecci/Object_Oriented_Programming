#include <iostream>
using namespace std;

int main(){
int M[3][3]={{1,2,3},{4,5,6},{7,8,9}};

int (*ptr)[3]; //행을 3으로 하는 배열포인터        
int *p;        //포인터 변수p 
int **pt;      //이중포인터 pt

ptr = M; 
cout <<"ptr=M 하고 난 후\n"<<"ptr= "<< ptr <<"\tM= "<< M <<"\n"; //ptr은 M의 주소(ptr==M)
cout <<"ptr+1= "<< ptr+1 <<"\tM+1= "<< M+1 <<"\n"; //1행 3열이므로 행을 이동하여, 주소가 3x4byte만큼 이동(ptr+1==M+1)
cout <<"*(ptr+1)= "<< *(ptr+1)  <<"\tptr[1]= "<< ptr[1] <<"\t*(M+1)= "<< *(M+1) <<"\tM[1]= "<< M[1] <<"\n"; //ptr[1][0]의 주소
cout <<"**(ptr+1)= "<< **(ptr+1)  <<"\t**(M+1)= "<< **(M+1) <<"\t*M[1]= "<< *M[1] <<"\tM[1][0]= "<< M[1][0]<<"\n"; //ptr[1][0]의 주소에 있는 값(4)을 참조

p = M[0]; 
cout <<"p=M[0] 하고 난 후\n"<<"p= "<< p <<"\tM[0]= "<< M[0] <<"\t*M= "<< *M<<"\n"; //배열 M의 시작주소
cout <<"p+1= "<< p+1 <<"\tM[0]+1= "<< M[0]+1 <<"\t*M+1= "<< *M+1<<"\n"; //int형이므로 주소가 4byte만큼 이동(p+1==M[0]+1==*M+1)
cout <<"*(p+1)= "<< *(p+1) <<"\t*(M[0]+1)= "<< *(M[0]+1) <<"\t*(*M+1)= "<< *(*M+1)<<"\n"; //M[0][1]의 주소에 간접 참조 연산(2 출력)

pt = &p;   // pt = M; (X) 
cout <<"pt=&p 하고 난 후\n"<<"*pt= "<< *pt <<"\tp= "<< p <<"\n"; //p의 주소를 간접 참조하여 p가 가지고 있던 M의 시작주소를 출력(*pt==p)
cout <<"**pt= "<< **pt <<"\t*p= "<< *p<<"\n"; //p의 주소를 간접 참조하여 p가 가지고 있던 M의 시작주소에 접근하여 또 한번 참조하니 M의 시작값 M[0][0]을 출력(1)

return 0;
}

/*
#include <iostream>
using namespace std;
int main(){
int M[3][3]={{1,2,3},{4,5,6},{7,8,9}};

int(*ptr)[3];
//행을 3으로 하는 배열 포인터이다. 만약 괄호가 없으면 int형 포인터 2개가 
연속적으로 저장되는 포인터 배열이 선언될 것이다.
int*p;
int**pt;
//포인터 변수 p와 이중 포인터 pt이다.

ptr = M; 
cout <<"ptr=M 하고 난 후\n"<<"ptr= "<<ptr <<"\tM= "<<M <<"\n";
//ptr은 M의 주소와 같다.
cout <<"ptr+1= "<<ptr+1 <<"\tM+1= "<<M+1 <<"\n";
//1행당 3열이므로 주소를 3(행)x4(int)byte만큼 이동한다.
cout <<"*(ptr+1)= "<<*(ptr+1) <<"\tptr[1]= "<<ptr[1]<<"\t*(M+1)= "<<*(M+1) <<"\tM[1]= "<<M[1] <<"\n";
//ptr[1]의 주소와 같다.
cout <<"**(ptr+1)= "<<**(ptr+1)<<"\t**(M+1)= "<<**(M+1)<<"\t*M[1]= "<<*M[1] <<"\tM[1][0]= "<<M[1][0]<<"\n";
//ptr[1]의 주소에 있는 값을 참조==4.

p = M[0]; 
cout <<"p=M[0] 하고 난 후\n"<<"p= "<<p <<"\tM[0]= "<<M[0] <<"\t*M= "<<*M<<"\n";
//배열 M의 시작 주소이다.
cout <<"p+1= "<<p+1 <<"\tM[0]+1= "<<M[0]+1 <<"\t*M+1= "<<*M+1<<"\n";
//int형이므로 주소가 4byte만큼 이동한다.
cout <<"*(p+1)= "<<*(p+1) <<"\t*(M[0]+1)= "<<*(M[0]+1) <<"\t*(*M+1)= "<<*(*M+1)<<"\n";
//M[0][1]의 주소에 간접 참조하여 2를 출력

pt = &p;// pt = M; (X) 
cout <<"pt=&p 하고 난 후\n"<<"*pt= "<<*pt <<"\tp= "<<p <<"\n";
//p의 주소를 간접 참조하여 p가 가지고 있던 M의 시작 주소를 출력한다.
cout <<"**pt= "<<**pt <<"\t*p= "<<*p<<"\n";
//p의 주소를 간접 참조하여 p가 가지고 있던 M의 시작주소에 접근하여 또 한번 
참조하니 M의 시작 값 M[0][0]을 출력

return 0;
}
*/